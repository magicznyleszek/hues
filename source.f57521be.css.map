{"mappings":"AE6CA,wD,mIASA,+DAGE,kFCiDF,sDC9CA,uE,yCCvCA,6ECYA,oGC6DA,+D,kEASA,mCAGE,+BAGF,sC,kDAMA,6DCjFA,oFAKA","sources":["source.f57521be.css","be637db536bc6768","source/display/PasteBox.vue","source/spaces/SpacePart.vue","source/spaces/SpaceForm.vue","source/spaces/SpacesList.vue","source/display/ColorSquare.vue","source/display/CurrentColor.vue","source/App.vue"],"sourcesContent":[".paste-box[data-v-94dede] {\n  margin: var(--s-leading-half) 0;\n}\n\ninput[data-v-94dede] {\n  width: 100%;\n  color: var(--c-dove-gray);\n  padding: var(--s-leading-half);\n  box-shadow: inset 0 0 0 1px var(--c-celeste);\n}\n\ninput[data-v-94dede]:not(:placeholder-shown) {\n  font-style: italic;\n}\n\ninput[data-v-94dede]:focus {\n  color: var(--c-shark);\n  background-color: var(--c-celeste);\n}\n\ninput[data-v-59ff06] {\n  text-align: center;\n  min-width: 1rem;\n}\n\nform[data-v-505e48], div[data-v-505e48] {\n  flex-direction: row;\n  display: flex;\n}\n\nbutton[data-v-505e48] {\n  margin-left: .25rem;\n}\n\ndiv[data-v-3ea5f8] {\n  flex-flow: wrap;\n  justify-content: space-between;\n  display: flex;\n}\n\nfigure[data-v-159269] {\n  width: 100%;\n  min-width: calc(var(--s-leading) * 3);\n  height: calc(var(--s-leading) * 3);\n}\n\n.wrapper[data-v-f34aad] {\n  flex-flow: wrap;\n  width: 100%;\n  display: flex;\n}\n\n.wrapper + .wrapper[data-v-f34aad] {\n  margin-top: var(--s-leading-half);\n}\n\n.current[data-v-f34aad] {\n  width: 100%;\n}\n\n.matched[data-v-f34aad] {\n  flex: 1;\n}\n\n.hue[data-v-f34aad] {\n  text-align: center;\n}\n\n.distance[data-v-f34aad] {\n  color: var(--c-dove-gray);\n}\n\n.matched-info[data-v-f34aad] {\n  flex-direction: row;\n  display: flex;\n}\n\nheader[data-v-4c3e89] {\n  flex-direction: row;\n  justify-content: space-between;\n  display: flex;\n}\n\nheader h1[data-v-4c3e89] {\n  font-size: inherit;\n  font-weight: bold;\n}\n/*# sourceMappingURL=source.f57521be.css.map */\n","@import \"4f38c08a13399276\";\n@import \"e727616ef96f8f65\";\n@import \"8a470b1553e4c8bd\";\n@import \"6b4501da1b20d059\";\n@import \"7af7f218b2cdd388\";\n@import \"5f3d71d919c62da9\";\n@import \"c16d6d9ff7cc078d\";\n","<template lang=\"html\">\n  <div class=\"paste-box\">\n    <input\n      title=\"paste here\"\n      type=\"text\"\n      placeholder=\"paste or type here\"\n      @input=\"onInput\"\n      @keydown=\"onKeyDown\"\n    >\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport identifier from '../colors/identifier'\nimport { useHuesStore } from '../store/huesStore'\nexport default defineComponent({\n  name: 'PasteBox',\n  methods: {\n    identifyValue(value: string): void {\n      const store = useHuesStore()\n      const identified = identifier.identify(value)\n      if (identified !== null) {\n        store.setColor({ color: identified })\n      }\n    },\n    onInput(evt: Event): void {\n      const target = evt.target as HTMLInputElement\n      this.identifyValue(target.value)\n    },\n    onKeyDown(evt: KeyboardEvent): void {\n      const target = evt.target as HTMLInputElement\n      switch (evt.key) {\n        case 'Enter':\n          this.identifyValue(target.value)\n          break\n        default:\n          return\n      }\n    },\n  },\n})\n</script>\n\n<style lang=\"css\" scoped>\n.paste-box {\n  margin: var(--s-leading-half) 0;\n}\n\ninput {\n  width: 100%;\n  color: var(--c-dove-gray);\n  padding: var(--s-leading-half);\n  box-shadow: inset 0 0 0 1px var(--c-celeste);\n}\n\ninput:not(:placeholder-shown) {\n  font-style: italic;\n}\n\ninput:focus {\n  color: var(--c-shark);\n  background-color: var(--c-celeste);\n}\n</style>\n","<template lang=\"html\">\n  <input\n    :value=\"partValue\"\n    type=\"text\"\n    :style=\"widthStyle\"\n    @input=\"onInput\"\n    @keydown=\"onKeyDown\"\n  >\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType } from 'vue'\nimport converter from '../colors/converter'\nimport { useHuesStore } from '../store/huesStore'\nexport default defineComponent({\n  name: 'SpacePart',\n  props: {\n    partIndex: {\n      type: Number,\n      required: true,\n    },\n    partType: {\n      type: String as PropType<SpacePartType>,\n      required: true,\n    },\n    range: {\n      type: Array<number>,\n      required: true,\n    },\n    space: {\n      type: String as PropType<Space>,\n      required: true,\n    },\n  },\n  computed: {\n    partValue() {\n      const store = useHuesStore()\n      const color = store.getColorInSpace(this.space)\n      return color[this.partIndex + 1]\n    },\n    widthStyle() {\n      const valueTextLength = String(this.partValue).length\n      return `width: ${valueTextLength * 0.75}rem;`\n    },\n  },\n  methods: {\n    onInput(evt: Event): void {\n      const target = evt.target as HTMLInputElement\n      this.setValueWithChange(target.value)\n    },\n    onKeyDown(evt: KeyboardEvent) {\n      switch (evt.key) {\n        case 'ArrowUp':\n          if (evt.shiftKey) {\n            this.setValueWithChange(this.partValue, 10)\n          } else {\n            this.setValueWithChange(this.partValue, 1)\n          }\n          evt.preventDefault()\n          break\n        case 'ArrowDown':\n          if (evt.shiftKey) {\n            this.setValueWithChange(this.partValue, -10)\n          } else {\n            this.setValueWithChange(this.partValue, -1)\n          }\n          evt.preventDefault()\n          break\n        default:\n          return\n      }\n    },\n    setValueWithChange(newValue: ColorValuePart, change: number = 0): void {\n      const store = useHuesStore()\n\n      let finalValue = newValue || '0'\n      if (this.partType === 'hexadecimal') {\n        finalValue = converter.hexToInt(finalValue)\n      } else {\n        finalValue = parseInt(String(finalValue), 10)\n      }\n\n      finalValue += change\n\n      // fix by range limits\n      finalValue = Math.max(finalValue, this.range[0])\n      finalValue = Math.min(finalValue, this.range[1])\n\n      // change it back to proper type if necessary\n      if (this.partType === 'hexadecimal') {\n        finalValue = converter.intToHex(finalValue)\n      }\n\n      // update store color\n      const color = store.getColorInSpace(this.space)\n      if (this.partType === 'integer') {\n        finalValue = Number(finalValue)\n      }\n      color[this.partIndex + 1] = finalValue\n      store.setColor({ color: color })\n    },\n  },\n})\n</script>\n\n<style lang=\"css\" scoped>\ninput {\n  min-width: 1rem;\n  text-align: center;\n}\n</style>\n","<template lang=\"html\">\n  <form>\n    <div\n      v-for=\"(part, index) in parts\"\n      :key=\"index\"\n    >\n      <span v-if=\"part.before\">{{ part.before }}</span>\n      <space-part\n        :part-index=\"index\"\n        :part-type=\"part.partType\"\n        :range=\"part.range\"\n        :space=\"space\"\n      />\n      <span v-if=\"part.after\">{{ part.after }}</span>\n    </div>\n    <button\n      title=\"copy to clipboard\"\n      @click=\"onCopyClick\"\n    >\n      &darr;\n    </button>\n  </form>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType } from 'vue'\nimport SpacePart from './SpacePart.vue'\nimport { spaces } from './spacesConfig'\nimport formatter from '../colors/formatter'\nimport clipboardier from '../misc/clipboardier'\nimport { useHuesStore } from '../store/huesStore'\n\nexport default defineComponent({\n  name: 'SpaceForm',\n  components: {\n    SpacePart,\n  },\n  props: {\n    space: {\n      type: String as PropType<Space>,\n      required: true,\n    },\n  },\n  data: function () {\n    return {\n      parts: spaces.get(this.space)?.parts,\n    }\n  },\n  methods: {\n    onCopyClick(evt: MouseEvent): void {\n      evt.preventDefault()\n      const store = useHuesStore()\n      const colorValue = store.getColorInSpace(this.space)\n      clipboardier.copyToClipboard(formatter.formatColor(colorValue))\n    },\n  },\n})\n</script>\n\n<style lang=\"css\" scoped>\nform,\ndiv {\n  display: flex;\n  flex-direction: row;\n}\n\nbutton {\n  margin-left: 0.25rem;\n}\n</style>\n","<template lang=\"html\">\n  <div>\n    <space-form space=\"rgb\" />\n    <space-form space=\"hex\" />\n    <space-form space=\"hsl\" />\n    <space-form space=\"hwb\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport SpaceForm from './SpaceForm.vue'\nexport default defineComponent({\n  name: 'SpacesList',\n  components: {\n    SpaceForm,\n  },\n})\n</script>\n\n<style lang=\"css\" scoped>\ndiv {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n}\n</style>\n","<template lang=\"html\">\n  <figure\n    :style=\"bgStyle\"\n    :title=\"title\"\n  />\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType } from 'vue'\nimport formatter from '../colors/formatter'\nexport default defineComponent({\n  name: 'ColorSquare',\n  props: {\n    color: {\n      type: Array as unknown as PropType<ColorValue>,\n      required: true,\n    },\n    title: {\n      type: String,\n      required: false,\n      default: '',\n    },\n  },\n  computed: {\n    bgStyle() {\n      const colorString = formatter.formatColor(this.color)\n      return `background-color: ${colorString};`\n    },\n  },\n})\n</script>\n\n<style lang=\"css\" scoped>\nfigure {\n  width: 100%;\n  min-width: calc(var(--s-leading) * 3);\n  height: calc(var(--s-leading) * 3);\n}\n</style>\n","<template lang=\"html\">\n  <div class=\"wrapper\">\n    <div class=\"current\">\n      <color-square\n        :color=\"currentColor\"\n        title=\"current color\"\n      />\n    </div>\n\n    <div class=\"matched\">\n      <color-square\n        :color=\"matchedColor\"\n        title=\"closest match\"\n      />\n      <div class=\"matched-info\">\n        <label>{{ matchedName }}</label>\n        &nbsp;\n        <span\n          class=\"distance\"\n          title=\"distance from current color\"\n        >&#8596; {{ matchedDifference }}</span>\n      </div>\n    </div>\n\n    <div class=\"hue\">\n      <color-square\n        space=\"hsl\"\n        :color=\"primaryHueColor\"\n        title=\"primary hue\"\n      />\n      <label>{{ primaryHueName }}</label>\n    </div>\n  </div>\n\n  <div class=\"wrapper\">\n    <button\n      title=\"copy as CSS variable\"\n      @click=\"onCopyClick\"\n    >\n      {{ formattedVariable }}\n    </button>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport ColorSquare from './ColorSquare.vue'\nimport formatter from '../colors/formatter'\nimport clipboardier from '../misc/clipboardier'\nimport { useHuesStore } from '../store/huesStore'\nexport default defineComponent({\n  name: 'CurrentColor',\n  components: {\n    ColorSquare,\n  },\n  computed: {\n    primaryHueColor() {\n      const store = useHuesStore()\n      return store.primaryHue.color\n    },\n    primaryHueName() {\n      const store = useHuesStore()\n      return store.primaryHue.name\n    },\n    currentColor() {\n      const store = useHuesStore()\n      return store.getColorInSpace('hsl')\n    },\n    matchedColor() {\n      const store = useHuesStore()\n      return store.match.color\n    },\n    matchedName() {\n      const store = useHuesStore()\n      return store.match.name\n    },\n    matchedDifference() {\n      const store = useHuesStore()\n      return store.match.difference\n    },\n    formattedVariable() {\n      return formatter.formatVariable(this.matchedName, this.matchedColor)\n    },\n  },\n  methods: {\n    onCopyClick(evt: MouseEvent): void {\n      evt.preventDefault()\n      clipboardier.copyToClipboard(formatter.formatVariable(this.matchedName, this.matchedColor))\n    },\n  },\n})\n</script>\n\n<style lang=\"css\" scoped>\n.wrapper {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  width: 100%;\n}\n\n.wrapper + .wrapper {\n  margin-top: var(--s-leading-half);\n}\n\n.current {\n  width: 100%;\n}\n\n.matched {\n  flex: 1;\n}\n\n.hue {\n  text-align: center;\n}\n\n.distance {\n  color: var(--c-dove-gray);\n}\n\n.matched-info {\n  display: flex;\n  flex-direction: row;\n}\n</style>\n","<template>\n  <div class=\"app\">\n    <header>\n      <h1>h(u,e,s)</h1>\n      <a\n        href=\"https://github.com/magicznyleszek/hues\"\n        target=\"_blank\"\n      >*</a>\n    </header>\n\n    <main>\n      <paste-box />\n      <spaces-list />\n      <current-color />\n    </main>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport PasteBox from './display/PasteBox.vue'\nimport SpacesList from './spaces/SpacesList.vue'\nimport CurrentColor from './display/CurrentColor.vue'\nexport default defineComponent({\n  name: 'App',\n  components: {\n    PasteBox,\n    SpacesList,\n    CurrentColor,\n  },\n})\n</script>\n\n<style lang=\"css\" scoped>\nheader {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\nheader h1 {\n  font-size: inherit;\n  font-weight: bold;\n}\n</style>\n"],"names":[],"version":3,"file":"source.f57521be.css.map"}